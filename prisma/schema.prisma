// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  transaction   Transaction[]
  category      Category[]
  wallets       Wallet[]
 
  @@map("users")
}

enum TransactionType {
  income
  expense
}

enum WalletType {
  cash
  bank
  virtual
  crypto
  other
}

model Wallet {
  id String @id @default(uuid()) 
  name String
  type WalletType
  userId String

  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  transactions Transaction[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([name, type, userId])
}

model Transaction {
  id String @id @default(uuid()) 
  type TransactionType
  amount Float
  description String?
  date DateTime

  categoryId String?
  userId String
  walletId String

  transferId String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])
  wallet  Wallet @relation(fields: [walletId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id String @id @default(uuid()) 
  name String
  type TransactionType
  userId String

  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt   DateTime       @default(now())
  @@unique([name, type, userId])
}
